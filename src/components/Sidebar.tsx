/** This comment is generated by system, put your components description on this section
    DO NOT CHANGE THIS COMMENT OPENING/CLOSING CHARACTERS OR YOUR COMPONENT
    DESCRIPTION WILL BE IGNORED, PUT YOUR DESCRIPTION AFTER 4 DASHES BELOW
----
Reusable vertical sidebar for dashboard pages, showing navigation links, collapse/expand, active section highlight, and optionally rendered according to user role.  
Props:
```tsx
type NavItem = {
  label: string;
  icon?: React.ReactNode;
  href: string;
  roles?: ("Admin" | "Verifikator" | "User")[];
};
type SidebarProps = {
  items: NavItem[];
  activeHref?: string;
  onNavigate?: (href: string) => void;
};
```
**/
import { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router';
import { LayoutDashboard, Users, UserPlus, LogOut, ChevronLeft, ChevronRight } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';

type NavItem = {
  label: string;
  icon?: React.ReactNode;
  href: string;
  roles?: ('Admin' | 'Verifikator' | 'User')[];
};

type SidebarProps = {
  items: NavItem[];
  activeHref?: string;
  onNavigate?: (href: string) => void;
};

type User = {
  role: 'Admin' | 'Verifikator' | 'User';
};

export function Sidebar({ items, activeHref, onNavigate }: SidebarProps) {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [user, setUser] = useState<User | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    navigate('/login');
  };

  const filteredItems = items.filter(item => {
    if (!item.roles || !user) return true;
    return item.roles.includes(user.role);
  });

  const toggleSidebar = () => {
    setIsCollapsed(!isCollapsed);
  };

  const handleNavigation = (href: string) => {
    if (onNavigate) {
      onNavigate(href);
    }
  };

  return (
    <div className={`flex flex-col h-screen border-r ${isCollapsed ? 'w-16' : 'w-64'} transition-all duration-300`}>
      <div className="flex items-center justify-between p-4 border-b">
        {!isCollapsed && <h1 className="text-xl font-bold">Pasar KPR</h1>}
        <Button variant="ghost" size="icon" onClick={toggleSidebar}>
          {isCollapsed ? <ChevronRight className="h-4 w-4" /> : <ChevronLeft className="h-4 w-4" />}
        </Button>
      </div>
      <ScrollArea className="flex-1">
        <nav className="p-2">
          {filteredItems.map((item) => (
            <Link
              key={item.href}
              to={item.href}
              onClick={() => handleNavigation(item.href)}
              className={`flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground ${activeHref === item.href ? 'bg-accent' : ''}`}
            >
              {item.icon && <span>{item.icon}</span>}
              {!isCollapsed && <span>{item.label}</span>}
            </Link>
          ))}
        </nav>
      </ScrollArea>
      <div className="p-4 border-t">
        <Button
          variant="ghost"
          className="w-full justify-start gap-3"
          onClick={handleLogout}
        >
          <LogOut className="h-4 w-4" />
          {!isCollapsed && <span>Logout</span>}
        </Button>
      </div>
    </div>
  );
}
