/** This comment is generated by system, put your components description on this section
    DO NOT CHANGE THIS COMMENT OPENING/CLOSING CHARACTERS OR YOUR COMPONENT
    DESCRIPTION WILL BE IGNORED, PUT YOUR DESCRIPTION AFTER 4 DASHES BELOW
----
Reusable input field with label, error display, and optional description, used across add/edit/update forms for customers/users.  
Props:
```tsx
type FormFieldProps = {
  label: string;
  id: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  type?: string;
  required?: boolean;
  error?: string;
  description?: string;
  placeholder?: string;
  as?: "input" | "textarea";
  maxLength?: number;
};
```
**/
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { cn } from "@/lib/utils";

type FormFieldProps = {
  label: string;
  id: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  type?: string;
  required?: boolean;
  error?: string;
  description?: string;
  placeholder?: string;
  as?: "input" | "textarea";
  maxLength?: number;
};

export function FormField({
  label,
  id,
  value,
  onChange,
  type = "text",
  required = false,
  error,
  description,
  placeholder,
  as = "input",
  maxLength,
}: FormFieldProps) {
  const FieldComponent = as === "textarea" ? Textarea : Input;

  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <Label htmlFor={id} className={required ? "after:content-['*'] after:text-red-500 after:ml-0.5" : ""}>
          {label}
        </Label>
        {description && (
          <p className="text-sm text-muted-foreground">{description}</p>
        )}
      </div>
      <FieldComponent
        id={id}
        value={value}
        onChange={onChange}
        type={type}
        placeholder={placeholder}
        maxLength={maxLength}
        className={cn(
          error && "border-destructive focus-visible:ring-destructive"
        )}
      />
      {error && <p className="text-sm font-medium text-destructive">{error}</p>}
    </div>
  );
}
